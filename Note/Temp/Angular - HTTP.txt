Angular - HTTP
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { catchError, map, tap } from 'rxjs/operators';

const httpOptions = {
	headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};

@Injectable({
	providedIn: 'root'
})

export class Service1{
	constructor (private http: HttpClient) { }
	private apiUrl = 'api/heroes';

	getHeroes (): Observable<Hero[]> {
		return this.http.get<Hero[]>(this.apiUrl)
			.pipe(
			tap(_ => this.log('fetched heroes')),
			catchError(this.handleError<Hero[]>('getHeroes', []))
			);
	}

	getHero(id: number): Observable<Hero> {
		const url = `${this.apiUrl}/${id}`;
		return this.http.get<Hero>(url).pipe(
			tap(_ => this.log(`fetched hero id=${id}`)),
			catchError(this.handleError<Hero>(`getHero id=${id}`))
		);
	}

	updateHero(hero: Hero): Observable<any> {
		return this.http.put(this.apisUrl, hero, httpOptions).pipe(
			tap(_ => this.log(`updated hero id=${hero.id}`)),
			catchError(this.handleError<any>('updateHero'))
		);
	}
	________________________________________________________
	component.ts:
	save(): void {
		this.heroService.updateHero(this.hero)
			.subscribe(() => this.goBack());
	}

	addHero(hero: Hero): Observable<Hero> {
		return this.http.post<Hero>(this.apiUrl, hero, httpOptions).pipe(
			tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),
			catchError(this.handleError<Hero>('addHero'))
		);
	}
	
	deleteHero(hero: Hero | number): Observable<Hero> {
		const id = typeof hero === 'number' ? hero : hero.id;
		const url = `${this.apiUrl}/${id}`;

		return this.http.delete<Hero>(url, httpOptions).pipe(
			tap(_ => this.log(`deleted hero id=${id}`)),
			catchError(this.handleError<Hero>('deleteHero'))
		);
	}

	searchHeroes(term: string): Observable<Hero[]> {
		if (!term.trim()) {
			return of([]);
		}
		return this.http.get<Hero[]>(`${this.apiUrl}/?name=${term}`).pipe(
			tap(_ => this.log(`found heroes matching "${term}"`)),
			catchError(this.handleError<Hero[]>('searchHeroes', []))
		);
	}



	private handleError<T>(operation = 'operation', result?: T) {
		return (error: any): Observable<T> => {
			console.error(error);
			this.log(`${operation} failed: ${error.message}`);
			return of(result as T);
		};
	}
}
________________________________________________________
app.module.ts:
import { HttpClientModule } from '@angular/common/http';
	imports: [HttpClientModule]
________________________________________________________
component:
	this.heroService.getHero(id)
			.subscribe(hero => this.hero = hero, error => {console.log(error);});
________________________________________________________

===[Search]===
heroes$: Observable<Hero[]>;
private searchTerms = new Subject<string>();

search(term: string): void {
	this.searchTerms.next(term);
}

ngOnInit(): void {
	this.heroes$ = this.searchTerms.pipe(
		debounceTime(300),
		distinctUntilChanged(),
		switchMap((term: string) => this.heroService.searchHeroes(term)),
	);
}