Angular - Animation
import {trigger, transition, query, style, stagger, animate, group, animateChild} from "@angular/animations";

===[Basic]===
app.module.ts:
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
	imports: [BrowserAnimationModule]
_______________________________________
component: ts
import {trigger, state, style, animate, transition,...} from '@angular/animations';
	@Component({
		selector: 'app-root',
		templateUrl: 'app.component.html',
		styleUrls: ['app.component.css'],
		animations: [
			trigger('trigger1', [
				state('open', style({
					height: '200px',
					opacity: 1,
					backgroundColor: 'yellow'
				})),
				state('closed', style({
					height: '100px',
					opacity: 0.5,
					backgroundColor: 'green'
				})),
				transition('* => closed', [
					animate('1s')
				]),
				transition('* => open', [
					animate('0.5s')
				]),
			]),
		]
	})

	isOpen = true;
	toggle() {
		this.isOpen = !this.isOpen;
	}
_______________________________________
component:html
<div [@trigger1]="isOpen ? 'open' : 'closed'" class="open-close-container">


===[Syntax]===
open => close
open <=> close
* => close
* => *
_____________________
style({opacity: '*'}),


===[Void]===
animations: [
	trigger('flyInOut', [
		state('in', style({ transform: 'translateX(0)' })),
		transition('void => *', [
			style({ transform: 'translateX(-100%)' }),
			animate(100)
		]),
		transition('* => void', [
			animate(100, style({ transform: 'translateX(100%)' }))
		])
	])
]
__________________________________
<div @myInsertRemoveTrigger *ngIf="isShown" class="insert-remove-container">
	trigger('myInsertRemoveTrigger', [
		transition(':enter', [
			style({ opacity: 0 }),
			animate('5s', style({ opacity: 1 })),
		]),
		transition(':leave', [
			animate('5s', style({ opacity: 0 }))
		])
	]),


===[Boolean]===
animations: [
	trigger('openClose', [
		state('true', style({ height: '*' })),
		state('false', style({ height: '0px' })),
		transition('false <=> true', animate(500))
	])
],


===[Child Animation]===
[@.disabled]="isDisabled"
[@childAnimation]="boolean? 'state1' : 'state2'"


===[Disable Application-wide]===
export class AppComponent {
	@HostBinding('@.disabled')
	public animationsDisabled = false;
}


===[Callback]===
component: ts
onAnimationEvent ( event: AnimationEvent ) {
	console.warn(`Animation Trigger: ${event.triggerName|phaseName|totalTime|fromState|toState|element}`);
}
____________________________
component: html
<div [@openClose]="isOpen ? 'open' : 'closed'"
	(@openClose.start)="onAnimationEvent($event)"
	(@openClose.done)="onAnimationEvent($event)"
	class="open-close-container">


===[Keyframes]===
transition('* => active', [
	animate('2s', keyframes([
		style({ backgroundColor: 'blue', offset: 0}),
		style({ backgroundColor: 'red', offset: 0.8}),
		style({ backgroundColor: 'orange', offset: 1.0})
	])),
]),
transition('* => inactive', [
	animate('2s', keyframes([
		style({ backgroundColor: 'orange', offset: 0}),
		style({ backgroundColor: 'red', offset: 0.2}),
		style({ backgroundColor: 'blue', offset: 1.0})
	]))
]),


===[Pulse]===
trigger('openClose', [
	state('open', style({
		height: '200px',
		opacity: 1,
		backgroundColor: 'yellow'
	})),
	state('close', style({
		height: '100px',
		opacity: 0.5,
		backgroundColor: 'green'
	})),
	// ...
	transition('* => *', [
		animate('1s', keyframes ( [
			style({ opacity: 0.1, offset: 0.1 }),
			style({ opacity: 0.6, offset: 0.2 }),
			style({ opacity: 1,	 offset: 0.5 }),
			style({ opacity: 0.2, offset: 0.7 })
		]))
	])
])


===[query()|stagger()]===
animations: [
		trigger('pageAnimations', [
			transition(':enter', [
				query('.hero, form', [
					style({opacity: 0, transform: 'translateY(-100px)'}),
					stagger(-30, [
						animate('500ms cubic-bezier(0.35, 0, 0.25, 1)', style({ opacity: 1, transform: 'none' }))
					])
				])
			])
		]),
	]
___________________________
@HostBinding('@pageAnimations')


===[Parallel]===
transition('void => *', [
	style({ width: 10, transform: 'translateX(50px)', opacity: 0 }),
	group([
		animate('0.3s 0.1s ease', style({
			transform: 'translateX(0)',
			width: 120
		})),
		animate('0.3s ease', style({
			opacity: 1
		}))
	])
]),


===[Filter Animation]===
<ul class="heroes" [@filterAnimation]="heroTotal">
_________________________________
@Component({
	animations: [
		trigger('filterAnimation', [
			transition(':enter, * => 0, * => -1', []),
			transition(':increment', [
				query(':enter', [
					style({ opacity: 0, width: '0px' }),
					stagger(50, [
						animate('300ms ease-out', style({ opacity: 1, width: '*' })),
					]),
				], { optional: true })
			]),
			transition(':decrement', [
				query(':leave', [
					stagger(50, [
						animate('300ms ease-out', style({ opacity: 0, width: '0px' })),
					]),
				])
			]),
		]),
	]
})
export class HeroListPageComponent implements OnInit {
	heroTotal = -1;
}


===[Reusable]===
export const transAnimation = animation([
	style({
		height: '{{ height }}',
		opacity: '{{ opacity }}',
		backgroundColor: '{{ backgroundColor }}'
	}),
	animate('{{ time }}')
]);
_______________________________
import { transAnimation } from './animations';

@Component({
	animations: [
		trigger('openClose', [
			transition('open => closed', [
				useAnimation(transAnimation, {
					params: {
						height: 0,
						opacity: 1,
						backgroundColor: 'red',
						time: '1s'
					}
				})
			])
		])
	],
})


===[Route]===
{ path: 'home', component: HomeComponent, data: {animation: 'HomePage'} },
{ path: 'about', component: AboutComponent, data: {animation: 'AboutPage'} },

prepareRoute(outlet: RouterOutlet) {
	return outlet && outlet.activatedRouteData && outlet.activatedRouteData['animation'];
}
___________________________________
<div [@routeAnimations]="prepareRoute(outlet)" >
	<router-outlet #outlet="outlet"></router-outlet>
</div>
___________________________________
animation.ts:
export const slideInAnimation =
	trigger('routeAnimations', [
		transition('HomePage <=> AboutPage', [
			style({ position: 'relative' }),
			query(':enter, :leave', [
				style({
					position: 'absolute',
					top: 0,
					left: 0,
					width: '100%'
				})
			]),
			query(':enter', [
				style({ left: '-100%'})
			]),
			query(':leave', animateChild()),
			group([
				query(':leave', [
					animate('300ms ease-out', style({ left: '100%'}))
				]),
				query(':enter', [
					animate('300ms ease-out', style({ left: '0%'}))
				])
			]),
			query(':enter', animateChild()),
		]),
		transition('* <=> FilterPage', [
			style({ position: 'relative' }),
			query(':enter, :leave', [
				style({
					position: 'absolute',
					top: 0,
					left: 0,
					width: '100%'
				})
			]),
			query(':enter', [
				style({ left: '-100%'})
			]),
			query(':leave', animateChild()),
			group([
				query(':leave', [
					animate('200ms ease-out', style({ left: '100%'}))
				]),
				query(':enter', [
					animate('300ms ease-out', style({ left: '0%'}))
				])
			]),
			query(':enter', animateChild()),
		])
	]);
________________________________________________
app.component.ts:
@Component({
	selector: 'app-root',
	templateUrl: 'app.component.html',
	styleUrls: ['app.component.css'],
	animations: [
		slideInAnimation
	]
})